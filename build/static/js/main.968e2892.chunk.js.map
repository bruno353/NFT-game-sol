{"version":3,"sources":["assets/Octocat.png","constants.js","Components/LoadingIndicator/index.js","Components/SelectCharacter/index.js","Components/Arena/index.js","App.js","index.js"],"names":["CONTRACT_ADDRESS","transformCharacterData","characterData","name","imageURI","hp","toNumber","maxHp","attackDamage","LoadingIndicator","className","SelectCharacter","setCharacterNFT","useState","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","myEpicGame","abi","console","log","getCharacters","a","getAllDefaultCharacters","charactersTxn","map","error","onCharacterMint","sender","tokenId","characterIndex","checkIfUserHasNFT","characterNFT","alert","on","off","length","character","index","src","alt","type","onClick","characterId","mintCharacterNFT","mintTxn","wait","warn","Arena","boss","setBoss","attackState","setAttackState","showToast","setShowToast","runAttackAction","attackBoss","attackTxn","setTimeout","fetchBoss","getBigBoss","bossTxn","onAttackComplete","newBossHp","newPlayerHp","bossHp","playerHp","prevState","id","value","max","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","isLoading","setIsLoading","checkIfWalletIsConnected","request","method","accounts","account","connectWalletAction","fetchNFTMetadata","provider","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.968e2892.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Octocat.363cb5ed.png\";","const CONTRACT_ADDRESS = '0x4c4457a129DCf6f6D131D08d15d2726d4D6D8e03';\n\n/*\n * Add this method and make sure to export it on the bottom!\n */\nconst transformCharacterData = (characterData) => {\n    return {\n      name: characterData.name,\n      imageURI: characterData.imageURI,\n      hp: characterData.hp.toNumber(),\n      maxHp: characterData.maxHp.toNumber(),\n      attackDamage: characterData.attackDamage.toNumber(),\n    };\n  };\n\nexport { CONTRACT_ADDRESS, transformCharacterData };","import React from 'react';\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import React, { useEffect, useState } from 'react';\nimport './SelectCharacter.css';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json';\nimport LoadingIndicator from '../LoadingIndicator';\n\n\nconst SelectCharacter = ({ setCharacterNFT }) => {\n    const [characters, setCharacters] = useState([]);\n    const [gameContract, setGameContract] = useState(null);\n\n    //new minting state property\n    const [mintingCharacter, setMintingCharacter] = useState(false);\n\n    // Actions\n    const mintCharacterNFTAction = (characterId) => async () => {\n        try {\n        if (gameContract) {\n            // show loading indicator when minting is happening\n            setMintingCharacter(true);\n\n            console.log('Minting character in progress...');\n            const mintTxn = await gameContract.mintCharacterNFT(characterId);\n            await mintTxn.wait();\n            console.log('mintTxn:', mintTxn);\n\n            // hide the loading indicator when minting is done\n            setMintingCharacter(false);\n        }\n        } catch (error) {\n            console.warn('MintCharacterAction Error:', error);\n\n            // if there is an error hide the loading indicator too\n            setMintingCharacter(false);\n        }\n    };\n\n    // UseEffect\n    useEffect(() => {\n        const { ethereum } = window;\n    \n        if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const gameContract = new ethers.Contract(\n            CONTRACT_ADDRESS,\n            myEpicGame.abi,\n            signer\n        );\n    \n        //This is the big difference. Set our gameContract in state.\n        setGameContract(gameContract);\n        } else {\n            console.log('Ethereum object not found');\n        }\n    }, []);\n\n    useEffect(() => {\n        const getCharacters = async () => {\n            try {\n                console.log('Getting contract characters to mint');\n        \n                /*Call contract to get all mint-able characters\n                */\n                const charactersTxn = await gameContract.getAllDefaultCharacters();\n                console.log('charactersTxn:', charactersTxn);\n        \n                /*Go through all of our characters and transform the data\n                */\n                const characters = charactersTxn.map((characterData) =>\n                transformCharacterData(characterData)\n                );\n        \n                /*Set all mint-able characters in state\n                */\n                setCharacters(characters);\n            } catch (error) {\n                console.error('Something went wrong fetching characters:', error);\n            }\n        };\n\n        // Add a callback method that will fire when this event is received\n        const onCharacterMint = async (sender, tokenId, characterIndex) => {\n            console.log(\n            `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n            );\n\n            /*\n            Once our character NFT is minted we can fetch the metadata from our contract\n            and set it in state to move onto the Arena\n            */\n            if (gameContract) {\n            const characterNFT = await gameContract.checkIfUserHasNFT();\n            console.log('CharacterNFT: ', characterNFT);\n            setCharacterNFT(transformCharacterData(characterNFT));\n            }\n            alert(`Your NFT is all done -- see it here: https://testnets.opensea.io/assets/${gameContract}/${tokenId.toNumber()}`)\n        };\n    \n        /*\n        If our gameContract is ready, let's get characters!\n        */\n        if (gameContract) {\n            getCharacters();\n            /*\n            Setup NFT Minted Listener\n            */\n            gameContract.on('CharacterNFTMinted', onCharacterMint);\n        }\n\n        return () => {\n            /*\n            When your component unmounts, let;s make sure to clean up this listener\n            */\n            if (gameContract) {\n                gameContract.off('CharacterNFTMinted', onCharacterMint);\n            }\n        };\n    }, [gameContract]);\n\n    // Render Methods\n    const renderCharacters = () =>\n    characters.map((character, index) => (\n    <div className=\"character-item\" key={character.name}>\n        <div className=\"name-container\">\n        <p>{character.name}</p>\n        </div>\n        <img src={character.imageURI} alt={character.name} />\n        <button\n        type=\"button\"\n        className=\"character-mint-button\"\n        onClick={mintCharacterNFTAction(index)}\n        >{`Mint ${character.name}`}</button>\n    </div>\n    ));\n\n    return (\n        <div className=\"select-character-container\">\n        <h2>Mint Your Hero. Choose wisely.</h2>\n        {/* Only show this when there are characters in state */}\n        {characters.length > 0 && (\n            <div className=\"character-grid\">{renderCharacters()}</div>\n        )}\n        {/* Only show our loading state if mintingCharacter is true */}\n        {mintingCharacter && (\n        <div className=\"loading\">\n            <div className=\"indicator\">\n            <LoadingIndicator />\n            <p>Minting In Progress...</p>\n            </div>\n            <img\n            src=\"https://media0.giphy.com/media/32RnqZkHVC2Fr2QTj8/200w.webp?cid=ecf05e47a95gui0ck2w2z761jm1gnarko0iqg60u1uaj8bbr&rid=200w.webp&ct=g\"\n            alt=\"Minting loading indicator\"\n            />\n        </div>\n        )}\n        </div>\n    );\n};\n\nexport default SelectCharacter;","import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json';\nimport './Arena.css';\nimport LoadingIndicator from '../LoadingIndicator';\n\n    /*\n    We pass in our characterNFT metadata so we can a cool card in our UI\n    */\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\n\n    // State\n    const [gameContract, setGameContract] = useState(null);\n    // State that will hold the boss metadata\n    const [boss, setBoss] = useState(null);\n\n    // use this for animations during attacks\n    const [attackState, setAttackState] = useState('');\n\n    // Toast state\n    const [showToast, setShowToast] = useState(false);\n\n    // Actions\n    const runAttackAction = async () => {\n        try {\n            if (gameContract) {\n                setAttackState('attacking');\n                console.log('Attacking boss...');\n                const attackTxn = await gameContract.attackBoss();\n                await attackTxn.wait();\n                console.log('attackTxn:', attackTxn);\n                setAttackState('hit');\n\n                //set toast to true then false 5 seconds later\n                setShowToast(true);\n                setTimeout(() => { //waits 5 seconds then removes the show class\n                    setShowToast(false);\n                }, 5000);\n            }\n            } catch (error) {\n            console.error('Error attacking boss:', error);\n            setAttackState('');\n            }\n    };\n\n    // UseEffects\n    useEffect(() => {\n        /*\n        Setup async function that will get the boss from our contract and sets in state\n        */\n        const fetchBoss = async () => {\n        const bossTxn = await gameContract.getBigBoss();\n        console.log('Boss:', bossTxn);\n        setBoss(transformCharacterData(bossTxn));\n        };\n\n        //Set up logic when event is fired\n        const onAttackComplete = (newBossHp, newPlayerHp) => {\n            const bossHp = newBossHp.toNumber();\n            const playerHp = newPlayerHp.toNumber();\n\n            console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\n\n            //update both player and boss hp\n            setBoss((prevState) => {\n                return { ...prevState, hp: bossHp };\n            });\n\n            setCharacterNFT((prevState) => {\n                return { ...prevState, hp: playerHp };\n            });\n        };\n    \n        if (gameContract) {\n        fetchBoss();\n        gameContract.on('AttackComplete', onAttackComplete);\n        }\n\n        return () => {\n            if (gameContract) {\n                gameContract.off('AttackComplete', onAttackComplete);\n            }\n        }\n    }, [gameContract]);\n\n    // UseEffects\n    useEffect(() => {\n        const { ethereum } = window;\n\n        if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const gameContract = new ethers.Contract(\n            CONTRACT_ADDRESS,\n            myEpicGame.abi,\n            signer\n        );\n\n        setGameContract(gameContract);\n        } else {\n        console.log('Ethereum object not found');\n        }\n    }, []);\n\n    return (\n        <div className=\"arena-container\">\n        {/* Toast HTML right here */}\n        {boss && characterNFT && (\n        <div id=\"toast\" className={showToast ? 'show' : ''}>\n            <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\n        </div>\n        )} \n\n        {/* Boss  */}\n        {boss && (\n            <div className=\"boss-container\">\n            <div className={`boss-content ${attackState}`} >\n                <h2>🔥 {boss.name} 🔥</h2>\n                <div className=\"image-content\">\n                <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\n                <div className=\"health-bar\">\n                    <progress value={boss.hp} max={boss.maxHp} />\n                    <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\n                </div>\n                </div>\n            </div>\n            <div className=\"attack-container\">\n                <button className=\"cta-button\" onClick={runAttackAction}>\n                {`💥 Attack ${boss.name}`}\n                </button>\n            </div>\n            {/* Add this right under your attack button */}\n            {attackState === 'attacking' && (\n                <div className=\"loading-indicator\">\n                <LoadingIndicator />\n                <p>Attacking ⚔️</p>\n                </div>\n            )}\n            </div>\n        )}   \n        {/* Character NFT */}\n        {characterNFT && (\n        <div className=\"players-container\">\n            <div className=\"player-container\">\n            <h2 className=\"character\">Your Character</h2>\n            <div className=\"player\">\n                <div className=\"image-content\">\n                <h2>{characterNFT.name}</h2>\n                <img\n                    src={characterNFT.imageURI}\n                    alt={`Character ${characterNFT.name}`}\n                />\n                <div className=\"health-bar\">\n                    <progress value={characterNFT.hp} max={characterNFT.maxHp} />\n                    <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\n                </div>\n                </div>\n                <div className=\"stats\">\n                <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\n                </div>\n            </div>\n            </div>\n            {/* <div className=\"active-players\">\n            <h2>Active Players</h2>\n            <div className=\"players-list\">{renderActivePlayersList()}</div>\n            </div> */}\n        </div>\n        )}\n        </div>\n    );\n};\n\nexport default Arena;","import React, {useEffect, useState} from 'react';\nimport twitterLogo from './assets/Octocat.png';\nimport './App.css';\nimport SelectCharacter from './Components/SelectCharacter';\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constants';\nimport myEpicGame from './utils/MyEpicGame.json';\nimport { ethers } from 'ethers';\nimport Arena from './Components/Arena';\nimport LoadingIndicator from './Components/LoadingIndicator';\n\n\n// Constants\nconst TWITTER_HANDLE = 'bruno353';\nconst TWITTER_LINK = `https://github.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n\n   //Just a state variable we use to store our user's public wallet. Don't forget to import useState.\n  const [currentAccount, setCurrentAccount] = useState(null);\n\n  // new state property\n  const [characterNFT, setCharacterNFT] = useState(null);\n\n  // state for laoding indicator\n  const [isLoading, setIsLoading] = useState(false);\n\n\n\n\n   // Since this method will take some time, make sure to declare it as async \n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window; // checking if user is connected to metamask\n\n      if (!ethereum) {\n        console.log('Make sure you have MetaMask!');\n\n        //set isLoading here\n        setIsLoading(false);\n        return;\n      } else {\n        console.log('We have the ethereum object', ethereum);\n\n        //Check if we're authorized to access the user's wallet        \n        const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n        //User can have multiple authorized accounts, we grab the first one if its there!\n        if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log('Found an authorized account:', account);\n          setCurrentAccount(account);\n        } else {\n          console.log('No authorized account found');\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n\n    //we release the state property after the function logic above\n    setIsLoading(false);\n  };\n\n  // Render Methods\n  const renderContent = () => {\n    // if app is loading, render the loadingindicator\n\n    if(isLoading){\n      return <LoadingIndicator/>\n    }\n\n    // Scenario #1\n    if (!currentAccount) {\n      return (\n        <div className=\"connect-wallet-container\">\n          <img\n            src=\"https://64.media.tumblr.com/c93ad3ff0a505fdb4c43394dc5b83aa5/512caf330ca7adab-b9/s540x810/943dd9df2ca886c97a31e24c68fce9dd4a95099d.gifv\"\n            alt=\"He-man Gif\"\n          />\n          <button\n            className=\"cta-button connect-wallet-button\"\n            onClick={connectWalletAction}\n          >\n            Connect Wallet To Get Started\n          </button>\n        </div>\n      );\n      //Scenario #2\n    } else if (currentAccount && !characterNFT) {\n      return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n    } else if (currentAccount && characterNFT) {\n      return <Arena characterNFT={characterNFT} setCharacterNFT={setCharacterNFT} />;\n    }\n  };\n\n  // implement connectwallet method here\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert('Get MetaMask!');\n        return;\n      }\n\n      // Fancy method to request access to account.\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      //Boom! This should print out public address once we authorize Metamask.\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n\n  useEffect(() => {\n    setIsLoading(true);\n    checkIfWalletIsConnected();\n  }, []);\n\n  useEffect(()=>{\n    // The function we will call that interacts with out smart contract\n    const fetchNFTMetadata = async () => {\n      console.log('Checking for Character NFT on address:', currentAccount);\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      const characterNFT = await gameContract.checkIfUserHasNFT();\n      if (characterNFT.name) {\n        console.log('User has character NFT');\n        setCharacterNFT(transformCharacterData(characterNFT));\n      }\n\n      // once its done loading, set loading to false\n      setIsLoading(false);\n    };\n\n    // We only want to run this, if we have a connected wallet\n    if (currentAccount) {\n      console.log('CurrentAccount:', currentAccount);\n      fetchNFTMetadata();\n    }\n\n  }, [currentAccount])\n\n  \n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">⚔️ The Masters of the Metaverse ⚔️</p>\n          <p className=\"sub-text\">Team up to protect the Universe!</p>\n          <p className=\"sub-text\">Rinkeby Network</p>\n            {/*\n             * Button that we will use to trigger wallet connect\n             * Don't forget to add the onClick event to call your method!\n             */}\n            {renderContent()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}